#===============================================
# Description: Build OpenWrt
# Lisence: MIT
# Original Author: P3TERX
# DIY: Tao173 
#===============================================

name: NanoPi_R4S_R2C_R2S OpenWrt

on:
  schedule:
    - cron: '* 17 * * *' 
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH Connection To Actions?'
        required: false
        default: 'false'
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  FILE_NAME: NanoPi
  TZ: Asia/Shanghai

jobs:
  Plus-NanoPi-R2C-Lean:
    runs-on: ubuntu-20.04
    env:
      VERSION: Plus_NanoPi_R2C_Lean
      EXPLAIN: 这是NanoPi_R2C基于Lean大源码的Plus版本
      FEEDS_CONF: diy/nanopi/feeds.conf.default
      CONFIG_FILE: diy/nanopi/r2c.config
      DIY_P1_SH: diy/nanopi/diy-part1.sh
      DIY_P2_SH: diy/nanopi/diy-part2.sh
      FILE_NAMES: NanoPi_R2C
    outputs:
      output: ${{ steps.step.outputs.R2C }}         
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %h")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV 

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
    - name: Setup Debug Session 'touch /tmp/keepalivegit'
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') 
      uses: csexton/debugger-action@master

    - name: Upload files to release
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false')     
      uses: ncipollo/release-action@v1
      with:
        name: Files ${{ env.DATEA }} ${{ env.FILE_NAME }}
        artifacts: ./openwrt/.config
        allowUpdates: true
        replacesArtifacts: true        
        tag: ${{ env.FILE_NAME }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          * 这是临时文件夹 🛒
          
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cp openwrt/.config build.config
        mkdir -p Packages
        cp -rf openwrt/bin/packages/*/*/*.ipk Packages
        tar -zcvf Packages.tar.gz Packages
        mv *.config *.tar.gz openwrt/bin/targets/*/*
        cd openwrt/bin/targets/*/*
        rm -rf packages feeds.buildinfo sha256sums version.buildinfo
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success" 

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        name: OpenWr for ${{ env.FILE_NAME }}
        artifacts: ${{ env.FIRMWARE }}/*
        allowUpdates: true
        replacesArtifacts: true
        tag: ${{ env.FILE_NAME }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          **This is OpenWrt firmware for NanoPi_R4S**
          * 编译时间 ${{ env.DATE }} 
          * 这是 NanoPi_R4S 使用的 OpenWrt 固件
          默认 IP：10.10.10.10 默认密码：password
          当前使用版本:【编译前的最后一次[➦主源码](https://github.com/coolsnowwolf/lede)更新记录】
          ${{ env.useVersionInfo }}

    - name: Set output status
      id: step
      if: steps.organize.outputs.status == 'success'
      run: echo "::set-output name=R2C::R2C"            

# /////////////////////////////////////////////////////////////////////////////////////////////////////////
  Plus-NanoPi-R2S-Lean:
    runs-on: ubuntu-20.04
    env:
      VERSION: Plus_NanoPi_R2S_Lean
      EXPLAIN: 这是NanoPi_R2S基于Lean大源码的Plus版本
      FEEDS_CONF: diy/nanopi/feeds.conf.default
      CONFIG_FILE: diy/nanopi/r2s.config
      DIY_P1_SH: diy/nanopi/diy-part1.sh
      DIY_P2_SH: diy/nanopi/diy-part2.sh
      FILE_NAMES: NanoPi_R2S
    outputs:
      output: ${{ steps.step.outputs.R2S }}           
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %h")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
    - name: Setup Debug Session 'touch /tmp/keepalivegit'
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') 
      uses: csexton/debugger-action@master

    - name: Upload files to release
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false')     
      uses: ncipollo/release-action@v1
      with:
        name: Files ${{ env.DATEA }} ${{ env.FILE_NAME }}
        artifacts: ./openwrt/.config
        allowUpdates: true
        replacesArtifacts: true        
        tag: ${{ env.FILE_NAME }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          * 这是临时文件夹 🛒

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cp openwrt/.config build.config
        mkdir -p Packages
        cp -rf openwrt/bin/packages/*/*/*.ipk Packages
        tar -zcvf Packages.tar.gz Packages
        mv *.config *.tar.gz openwrt/bin/targets/*/*
        cd openwrt/bin/targets/*/*
        rm -rf packages feeds.buildinfo sha256sums version.buildinfo
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        name: OpenWr for ${{ env.FILE_NAME }}
        artifacts: ${{ env.FIRMWARE }}/*
        allowUpdates: true
        replacesArtifacts: true
        tag: ${{ env.FILE_NAME }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          **This is OpenWrt firmware for NanoPi_R4S**
          * 编译时间 ${{ env.DATE }} 
          * 这是 NanoPi_R4S 使用的 OpenWrt 固件
          默认 IP：10.10.10.10 默认密码：password
          当前使用版本:【编译前的最后一次[➦主源码](https://github.com/coolsnowwolf/lede)更新记录】
          ${{ env.useVersionInfo }}

    - name: Set output status
      id: step
      if: steps.organize.outputs.status == 'success'
      run: echo "::set-output name=R2S::R2S"  

# /////////////////////////////////////////////////////////////////////////////////////////////////////////
  Plus-NanoPi-R4S-Lean: 
    runs-on: ubuntu-20.04
    env:
      VERSION: Plus_NanoPi_R4S_Lean
      EXPLAIN: 这是NanoPi_R4S基于Lean大源码的Plus版本
      FEEDS_CONF: diy/nanopi/feeds.conf.default
      CONFIG_FILE: diy/nanopi/r4s.config
      DIY_P1_SH: diy/nanopi/diy-part1.sh
      DIY_P2_SH: diy/nanopi/diy-part2.sh
      FILE_NAMES: NanoPi_R4S
    outputs:
      output: ${{ steps.step.outputs.R4S }}           
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %h")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV

        
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
    - name: Setup Debug Session 'touch /tmp/keepalivegit'
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') 
      uses: csexton/debugger-action@master

    - name: Upload files to release
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false')     
      uses: ncipollo/release-action@v1
      with:
        name: Files ${{ env.DATEA }} ${{ env.FILE_NAME }}
        artifacts: ./openwrt/.config
        allowUpdates: true
        replacesArtifacts: true        
        tag: ${{ env.FILE_NAME }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          * 这是临时文件夹 🛒

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cp openwrt/.config build.config
        mkdir -p Packages
        cp -rf openwrt/bin/packages/*/*/*.ipk Packages
        tar -zcvf Packages.tar.gz Packages
        mv *.config *.tar.gz openwrt/bin/targets/*/*
        cd openwrt/bin/targets/*/*
        rm -rf packages feeds.buildinfo sha256sums version.buildinfo
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        name: OpenWr for ${{ env.FILE_NAME }}
        artifacts: ${{ env.FIRMWARE }}/*
        allowUpdates: true
        replacesArtifacts: true
        tag: ${{ env.FILE_NAME }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          **This is OpenWrt firmware for NanoPi_R4S**
          * 编译时间 ${{ env.DATE }} 
          * 这是 NanoPi_R4S 使用的 OpenWrt 固件
          默认 IP：10.10.10.10 默认密码：password
          当前使用版本:【编译前的最后一次[➦主源码](https://github.com/coolsnowwolf/lede)更新记录】
          ${{ env.useVersionInfo }}

    - name: Set output status
      id: step
      if: steps.organize.outputs.status == 'success'
      run: echo "::set-output name=R4S::R4S"  

# ///////////////////////////////////////////////////////////////////////////////////////////////////////
  over:
    if: ${{ always() }}
    needs: [Plus-NanoPi-R4S-Lean, Plus-NanoPi-R2S-Lean, Plus-NanoPi-R2C-Lean]
    runs-on: ubuntu-20.04
    steps:    
      - name: Checkout
        uses: actions/checkout@main
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          cd openwrt
          useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %h")
          Author=$(git show -s --date=short --format="Author: %an")
          Date=$(git show -s --date=short --format="date: %cd")
          Commit=$(git show -s --date=short --format="commit: %s")
          Hash=$(git show -s --date=short --format="commit hash: %h")
          echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
          echo "author=$Author" >> $GITHUB_ENV
          echo "date=$Date" >> $GITHUB_ENV
          echo "commit=$Commit" >> $GITHUB_ENV
          echo "hash=$Hash" >> $GITHUB_ENV
  
      - name: Telegram notification
        uses: appleboy/telegram-action@master
        if: ${{ always() }}
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{needs.Plus-NanoPi-R2S-Lean.outputs.output}} - ${{needs.Plus-NanoPi-R2C-Lean.outputs.output}} - ${{needs.Plus-NanoPi-R4S-Lean.outputs.output}}打包成功
            编译时间：${{ env.DATE }}
            更新信息：
            ${{ env.author }}
            ${{ env.date }}
            ${{ env.commit }}
            ${{ env.hash }}
            Note: 有设备名称的才是打包成功的，没有名称就是全都没有打包成功😂                                        
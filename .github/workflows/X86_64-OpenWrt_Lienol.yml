#===============================================
# Description: Build OpenWrt
# Lisence: MIT
# Original Author: P3TERX
# DIY: Tao173 
#===============================================
name: X86_64_Lienol_OpenWrt

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH Connection To Actions?'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/Lienol/openwrt
  REPO_BRANCH: 21.02
  FEEDS_CONF: diy/x86/feeds.conf.default
  CONFIG_FILE: diy/x86/Li.config
  DIY_P1_SH: diy/x86/diy-part1Li.sh
  DIY_P2_SH: diy/x86/diy-part2Li.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: X86_64_OFFICIAL

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
    - name: Setup Debug Session 'touch /tmp/keepalivegit'
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') 
      uses: csexton/debugger-action@master

    - name: Upload files to release
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false')     
      uses: ncipollo/release-action@v1
      with:
        name: Files ${{ env.DATEA }} ${{ env.FILE_NAME }}
        artifacts: ./openwrt/.config
        allowUpdates: true
        replacesArtifacts: true        
        tag: ${{ env.FILE_NAME }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          * 这是临时文件夹 🛒
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cp openwrt/.config build.config
        mkdir -p Packages
        cp -rf openwrt/bin/packages/*/*/*.ipk Packages
        tar -zcvf Packages.tar.gz Packages
        mv *.config *.tar.gz openwrt/bin/targets/*/*
        cd openwrt/bin/targets/*/*
        rm -rf packages feeds.buildinfo sha256sums version.buildinfo
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        name: R${{ env.DATE }} for ${{ env.FILE_NAME }}
        artifacts: ${{ env.FIRMWARE }}/*
        allowUpdates: true
        tag: ${{ env.FILE_NAME }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          **This is OpenWrt firmware for X86_64**
          * 这是 X86_64 平台使用的 OpenWrt 固件
          默认 IP：10.10.10.10 默认密码：password
          当前使用版本:【编译前的最后一次[➦主源码](https://github.com/openwrt/openwrt/tree/openwrt-22.03)更新记录】
          ${{ env.useVersionInfo }}

  #over:
  #  needs: [build]
  #  runs-on: ubuntu-20.04
  #  steps:
  #  - name: TG notification #TG推送
  #    run: curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=主人，OpenWrt系统打包成功。"
  #  - name: Telegram notification
  #    run: |
  #      MSG="
  #      编译时间：${{ env.DATE }}
  #      OpenWrt 更新信息：${{ env.useVersionInfo }}
  #      ${{ env.PRODUCT_NAME }} 编译完成
  #      "
  #      curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_TO }}&text=${MSG}"
  #  - name: 如果出现失败通知TG
  #    if: env.compile_error == 'true' && env.USE_TG == 'true'
  #    uses: appleboy/telegram-action@master
  #    with:
  #      to: ${{ secrets.TELEGRAM_TO }}
  #      token: ${{ secrets.TELEGRAM_TOKEN }}
  #      message: some errors in compile
    - name: Telegram notification
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          编译时间：${{ env.DATE }}
          更新信息：${{ env.useVersionInfo }}
          ${{ env.PRODUCT_NAME }}打包完成
#===============================================
# Description: multiple source check
# Lisence: MIT
# Original Author: Tao173 
#===============================================

name: Delete Artifacts Update Checker

on:
  schedule:
    - cron: '*/30 * * * *' 
  workflow_dispatch:
    inputs:
      SSH:
        description: 'SSH connection to Actions?'
        required: false
        default: 'false'
env:
  TZ: Asia/Shanghai

jobs:
  Checka:
    runs-on: ubuntu-20.04
    env:
      REPO_URL: https://github.com/coolsnowwolf/lede
      REPO_BRANCH: master
    steps:
    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH ./c
        cd c
        echo "::set-output name=commitHasha::$(git rev-parse HEAD)"
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHasha
        key: HEAD-${{ steps.getHash.outputs.commitHasha }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash
    - name: Trigger build
      if: steps.cacheHash.outputs.cache-hit != 'true'
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        event-type: Lean Source Code Update     
# /////////////////////////////////////////////////////////////////////////////////////////////////////////        
  Checkb:
    runs-on: ubuntu-20.04
    env:
      REPO_URL: https://github.com/Lienol/openwrt
      REPO_BRANCH: 21.02
    steps:
    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH ./b
        cd b
        echo "::set-output name=commitHashb::$(git rev-parse HEAD)"
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHashb }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHashb }} | tee .commitHash
    - name: Trigger build
      if: steps.cacheHash.outputs.cache-hit != 'true'
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        event-type: Lienol Source Code Update     
# /////////////////////////////////////////////////////////////////////////////////////////////////////////        
  Checkc:
    runs-on: ubuntu-20.04
    env:
      REPO_URL: https://github.com/immortalwrt/immortalwrt
      REPO_BRANCH: openwrt-21.02
    steps:
    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH ./c
        cd c
        echo "::set-output name=commitHashc::$(git rev-parse HEAD)"
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHashc }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHashc }} | tee .commitHash
    - name: Trigger build
      if: steps.cacheHash.outputs.cache-hit != 'true'
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        event-type: Immortalwrt Source Code Update      
# /////////////////////////////////////////////////////////////////////////////////////////////////////////        
  Checkd:
    runs-on: ubuntu-20.04
    env:
      REPO_URL: https://github.com/unifreq/openwrt_packit
      REPO_BRANCH: master
    outputs:
      output: ${{ steps.outputunifreq.outputs.unifreq }}        
    steps:
    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH ./d
        cd d
        echo "::set-output name=commitHashd::$(git rev-parse HEAD)"
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHashd }}

    - name: Save New Commit Hash
      id: outputunifreq
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHashd }} | tee .commitHash
        echo "::set-output name=unifreq::hello"
    - name: Trigger build
      if: steps.cacheHash.outputs.cache-hit != 'true'
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        event-type: Unifreq Source Code Update

  New-Update-Files:
    if: ${{needs.Checkd.outputs.output}} == 'hello'
    needs: [Checkd]    
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "$TZ"
        pwd
        chmod +x pull.sh
        ./pull.sh
    - name: Download Myself kernel
      uses: robinraju/release-downloader@v1.3
      with:
        repository: "Tao173/compile-kernel"
        latest: true
        fileName: "*"
        tarBall: true
        out-file-path: ./backup/mykernel
    - name: Release kernel tar
      run: |
        cd ./backup/mykernel
        find ./ -name *compile*|xargs rm -rf
        ls ./*.tar.gz |xargs -n1 tar xzvf
        rm -rf ./*gz
    - name: Commit
      run: |
        git config --global user.email Mr.Wanzi@outlook.com
        git config --global user.name Tao-Another
        git add .
        git commit -m"action:`date`"
        git pull --rebase
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.ACTIONS_TRIGGER_PAT }}             

# //////////////////////////////////////////////////////////////////////////////////////////////
  Cleaning:
    if: ${{ always() }}
    needs: [New-Update-Files,Checka,Checkb,Checkc,Checkd]    
    runs-on: ubuntu-20.04
    steps:
    - name: Delete Older Workflows
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        retain_days: 1
        keep_minimum_runs: 1

    - name: Telegram notification upload success
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          Ê∫êÁ†ÅÊõ¥Êñ∞ÊàêÂäü,ÂûÉÂúæÊ∏ÖÁêÜÂÆåÊàêüëè„ÄÇ


